<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on fabiorehm.com</title><link>https://fabiorehm.com/tags/docker/</link><description>Recent content in docker on fabiorehm.com</description><generator>Hugo -- gohugo.io</generator><copyright>&amp;copy; &lt;a href="https://github.com/fgrehm">Fabio Rehm&lt;/a> 2013-2022</copyright><lastBuildDate>Wed, 22 Jul 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://fabiorehm.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a minimum viable PhantomJS 2 Docker image</title><link>https://fabiorehm.com/blog/2015/07/22/building-a-minimum-viable-phantomjs2-docker-image/</link><pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2015/07/22/building-a-minimum-viable-phantomjs2-docker-image/</guid><description>As part of something I&amp;rsquo;ve been hacking on the side, I have a need to run a bunch of PhantomJS 2.0 containers on a Docker host. While I could&amp;rsquo;ve just built an image that includes its binary and consider it done, there is currently a need to build the phantomjs binary from sources for Linux machines. Not only that is a PITA but it also requires us to do some &amp;ldquo;juggling&amp;rdquo; to clean up build-time dependencies and it still produces a somewhat large Docker image as a result (something in the ~400mb).</description></item><item><title>Trigger notify-send across the network using HTTP</title><link>https://fabiorehm.com/blog/2014/10/12/trigger-notify-send-across-the-network-using-http/</link><pubDate>Sun, 12 Oct 2014 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2014/10/12/trigger-notify-send-across-the-network-using-http/</guid><description>Last week I cut the first release of notify-send-http, a tool for triggering notify-send across the network using HTTP. Useful for forwarding notifications from local VMs / Containers to your own computer. It even supports notification icons!
Tested on Ubuntu 14.04 only
Why? Because I do all of my dev work on virtualized environments and I use guard quite a lot to keep my Ruby tests running when files get changed.</description></item><item><title>Devstep updates</title><link>https://fabiorehm.com/blog/2014/09/25/devstep-updates/</link><pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2014/09/25/devstep-updates/</guid><description>The third release of the Devstep Docker image came out last night along with a brand new Golang CLI featuring some very nice improvements and new functionality. The CHANGELOG is here and on this post I&amp;rsquo;ll cover some exciting new stuff I was able to get in place.
Docker image updates Starting with the base image updates, the 0.2.0 release dropped from 1.168GB down to 867.7MB MB representing a ~25% reduction on disk usage.</description></item><item><title>Running GUI apps with Docker</title><link>https://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/</link><pubDate>Thu, 11 Sep 2014 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/</guid><description>I&amp;rsquo;ve been doing all of my real (paid) work on VMs / containers for a while now but when it comes to writing Java code for some projects for university I still need to move away from using vim and install some full blown IDE in order to be productive. This has been bothering me for quite some time but this week I was finally able put the pieces together to run NetBeans in a Docker container so that I can avoid installing a lot of Java stuff on my machine that I don&amp;rsquo;t use on a daily basis.</description></item><item><title>Devstep: Development environments powered by Docker and Buildpacks</title><link>https://fabiorehm.com/blog/2014/08/26/devstep-development-environments-powered-by-docker-and-buildpacks/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2014/08/26/devstep-development-environments-powered-by-docker-and-buildpacks/</guid><description>Devstep is a relatively new project that I I&amp;rsquo;ve been working on since February 2014 and had its second release last friday. On its current state, Devstep is a dead simple, no frills development environment builder powered by Docker and the buildpack abstraction that is based around a simple (yet ambitious) goal:
I want to git clone and run a single command to hack on any software project.
Intrigued? Check out the demo below of my &amp;ldquo;canonical Discourse example&amp;rdquo; and read on for more.</description></item><item><title>Ventriloquist demo</title><link>https://fabiorehm.com/blog/2013/10/13/ventriloquist-demo/</link><pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2013/10/13/ventriloquist-demo/</guid><description>A while ago I stumbled across this benchmark by Brandon Liu on StackMachine&amp;rsquo;s blog comparing the numbers for performing some typical tasks on his physical machine and doing the same thing using virtual machines.
The measurements were made using Discourse and compared the numbers of doing things on VirtualBox and VMware Fusion so I got curious to see how well vagrant-lxc shared folders would perform. What I ended up finding is that it seems that Discourse provides a base box that was configured by hand and the Chef cookbooks used only deal with some basic stuff and I&amp;rsquo;d have to either do things by hand or write some provisioning scripts on my own.</description></item><item><title>Announcing Ventriloquist</title><link>https://fabiorehm.com/blog/2013/09/11/announcing-ventriloquist/</link><pubDate>Wed, 11 Sep 2013 00:00:00 +0000</pubDate><guid>https://fabiorehm.com/blog/2013/09/11/announcing-ventriloquist/</guid><description>Although I&amp;rsquo;ve been writing about and working on a lot of Vagrant related stuff lately, I need to say that I&amp;rsquo;m not a &amp;ldquo;DevOps guy&amp;rdquo;. My day to day job still consists of building web apps using Ruby On Rails and even though I like using Puppet (and recently Chef), my daily work does not involve any sort of machine configuration management.
Configuring a Vagrant development environment is not an easy task.</description></item></channel></rss>